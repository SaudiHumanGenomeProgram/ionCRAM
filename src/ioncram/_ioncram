#! /usr/bin/env python3

import argparse
import sys
import subprocess
import shutil,os

binFolder=

def compareAlignments(file1,file2,ref):
    process=subprocess.Popen(['file',file1,file2],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output,errors=process.communicate()
    output=output.decode('UTF-8').split("\n")
    type1='ioncram' if "tar" in output[0] else 'bam/sam'
    type2='ioncram' if "tar" in output[1] else 'bam/sam'

    bamDecompression='<(samtools view %s)'
    icramDecompression='<(%sdecompressor.sh %s %s 4 - |samtools view -)'

    if type1 == 'ioncram':
        command1=icramDecompression%(binFolder,file1,ref)
    else:
        command1=bamDecompression%(file1)

    if type2 == 'ioncram':
        command2=icramDecompression%(binFolder,file2,ref)
    else:
        command2=bamDecompression%(file2)


    process=subprocess.Popen([binFolder+'compare_sam_unaligned.py '+command1+" "+ command2],stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,executable='/bin/bash')
    output,errors=process.communicate()
    output=output.decode('UTF-8').strip()
    return output

def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file %s does not exist!" % arg)
    else:
        return arg

def is_valid_outputFile(parser, arg):
    d=os.path.dirname(arg)
    if d !='' and  not os.path.exists(d):
        parser.error("The output folder %s does not exist!" % d)
    else:
        return arg

def compressMain(argv):
    parser = argparse.ArgumentParser(prog='icram compress',
                                     description='tool for compressing SAM/BAM into icram format',epilog="icram is format compatible with CRAM. The difference is the icram encode and compress Ion torrent flow signal with different algorithms.Developed by mostafa.shokrof@gmail.com",
                                     usage='IcramInterface compress [options] -i <input SAM/BAM> -r <input reference FASTA> -o <outputfile>'
)
    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')
    required.add_argument('-i', '--input-file', dest='inputFile',required=True,type=lambda x: is_valid_file(parser, x),
                        help='File name of the input file can be SAM/BAM')
    required.add_argument('-o','--output-file' ,dest='outputFile',required=True,type=lambda x: is_valid_outputFile(parser, x),
                        help='File name of the output icram file')
    required.add_argument('-r', '--reference',dest='ref',required=True,type=lambda x: is_valid_file(parser, x),
                        help='Reference fasta file used by CRAM compression. Should be the same reference used in the mapping phase')

    optional.add_argument('-b','--bed-file', dest='bed', default='no',
                    help='reads overlapping this BED FILE')

    optional.add_argument('-s','--num-splits', dest='splits', default='1',
                    help='Number of splits of bam file to be parallelly computed. default =1')

    optional.add_argument('-n','--binning', dest='binning', default='1',
                    help='Apply binning technique to the flowsignal to save more space(lossy). default No binning')
  
    optional.add_argument('-c','--check', dest='check', action='store_const',
                    const='check', default=False,
                    help='Check the compressed file and compare it with the original')
    optional.add_argument('-v','--verbose', dest='verbose', action='store_const',
                    const='verbose', default=False,
                    help='Print the size decompositon of the ICRAM file')
    optional.add_argument('-z','--compression', dest='compression', choices=['xz','gzip','bzip2','zstd'], default='xz',
                    help='Compression technique. xz is the default technique')

    # optional.add_argument('-l','--lossy', dest='lossy', action='store_const',
    #                 const='yes', default='no',
    #                 help='Lossy compression: store one read for every sequencing peak')
    # optional.add_argument('-t', '--lossy-threshold', dest='lossy_threshold',type=int,default=1000 , help='Number  of reads threshold in sequencing peak for lossy compression')

    optional.add_argument('-d','--deez', dest='deez', action='store_const',
                    const=True, default=False,
                    help='Use deez for compression')




    args = parser.parse_args(argv)
    if not os.path.exists(args.inputFile+".bai"):
        parser.error("The index file %s does not exist!" %(args.inputFile+".bai"))

    script=binFolder+'compressFlowSignal_FR.sh'
    if args.deez:
        script=binFolder+'compressFlowSignal_FR_deez.sh'


    command=[script,
             args.inputFile,
             args.ref,
             args.compression,
             "no",
             "0",
             args.bed,
             args.splits,
             args.binning,
             args.outputFile
    ]
#    print(" ".join(command))
    process=subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output,errors=process.communicate()
    errors=errors.decode('UTF-8').strip()
    errors=errors.split("\n")
    if args.verbose:
        partsTag=['Bases size',
                  'Quality size',
                  'Flowsignal size',
                  'AUX size',
                  'Read Names',
                  'Mapping data',
                  'Total '
        ]
        partsSize= {key: 0 for key in partsTag}
        errors2=[l.split("=") for l in errors]
        for l in errors2:
            if l[0] in partsTag:
                partsSize[l[0]]+=float(l[1])






        def formatUnit(value):
            units=['KB','MB','GB','TB','PB']
            i=0;
            value=float(value)
            while value >1024.0:
                i+=1
                value/=1024.0
            return "%.2f%s"%(value,units[i])

        print("Bases/Mapping =%s"%(formatUnit(partsSize['Mapping data']+partsSize['Bases size'])))
        print("Quality =%s"%(formatUnit(partsSize['Quality size'])))
        print("AUX(including FlowSignal) =%s"%(formatUnit(partsSize['AUX size']+partsSize['Read Names']+partsSize['Flowsignal size'])))
        print("FlowSignal =%s"%(formatUnit(partsSize['Flowsignal size'])))
        print("Total =%s"%(formatUnit(os.stat(args.outputFile).st_size/1024.0)))

    errors=filter(lambda x:"=" not in x  ,errors)
    errors=list(errors)
    if errors!=[]:
        print("\n".join(errors))

    if args.check:
        # if args.lossy == 'yes':
        #     print("Checking the Alignments is not supported in the lossy mode")
        #     return 0
        res=compareAlignments(args.inputFile,args.outputFile,args.ref)
        if res=='':
            print('ICRAM file is compressed correctly')
        else:
            print('Error in compression')
            print(res)



def versionMain(argv):
    print("Version: 2.1")

def citeMain(argv):
    print("Cite")

def compareMain(argv):
    parser = argparse.ArgumentParser(prog='icram compare',
                                     description='tool for comparing SAM/BAM/ICRAM files',epilog="icram is format compatible with CRAM. The difference is the icram encode and compress Ion torrent flow signal with different algorithms.Developed by mostafa.shokrof@gmail.com",
                                     usage='IcramInterface compress [options] -i <input SAM/BAM> -r <input reference FASTA> -o <outputfile>'
)
    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')
    required.add_argument('-i1','--input-file1',dest='inputFile1',required=True,type=lambda x: is_valid_file(parser, x),
                        help='File name of the first input file can be SAM/BAM/ICRAM')
    required.add_argument('-i2','--input-file2',dest='inputFile2',required=True,type=lambda x: is_valid_file(parser, x),
                        help='File name of the second input file can be SAM/BAM/ICRAM')
    required.add_argument('-r','--reference',dest='ref',required=True,type=lambda x: is_valid_file(parser, x),
                        help='Reference fasta file used by CRAM compression. Should be the same reference used in the mapping phase and icram compression')
    args = parser.parse_args(argv)
    out=compareAlignments(args.inputFile1,args.inputFile2,args.ref)
    if out =='':
        print("No changes found")
    else:
        print(out)


def decompressMain(argv):
    parser = argparse.ArgumentParser(prog='icram decompress',
                                     description='tool for decompressing icram into BAM format',epilog="icram is format compatible with CRAM. The difference is the icram encode and compress Ion torrent flow signal with different algorithms.Developed by mostafa.shokrof@gmail.com",
                                     usage='IcramInterface compress [options] -i <input icram> -r <input reference FASTA> -o <outputfile bam>'
)
    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')
    required.add_argument('-i','--input-file',dest='inputFile',required=True,type=lambda x: is_valid_file(parser, x),
                        help='File name of the input file(icram)')
    required.add_argument('-o','--output-file',dest='outputFile',required=True,type=lambda x: is_valid_outputFile(parser, x),
                        help='File name of the Output file(BAM)')
    required.add_argument('-r','--reference',dest='ref',required=True,type=lambda x: is_valid_file(parser, x),
                        help='Reference fasta file used by CRAM compression. Should be the same reference used in the mapping phase and icram compression')
    optional.add_argument('-s','--num-splits', dest='splits', default='1',
                    help='Number of splits of bam file to be parallelly computer. default =1')

    args = parser.parse_args(argv)
    command=[binFolder+'decompressor.sh',args.inputFile,args.ref,args.splits,args.outputFile]
#    print(" ".join(command))
    process=subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output,errors=process.communicate()
    errors=errors.decode('UTF-8').strip()
    errors=errors.split("\n")
    errors=filter(lambda x:x!='',errors)
    errors=list(errors)
    if errors!=[]:
        print("\n".join(errors))


if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Icram Main')
    parser.add_argument('prog',choices= ['compress','decompress','version','cite','compare'],
                    help='choose program')




    args = parser.parse_args(sys.argv[1:2])
    exec(args.prog+'Main(sys.argv[2:])')
